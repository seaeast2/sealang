Sea lang specification.


==TOKEN================================================================ 
<IMPORT> : import 
<VOID> : void 
<UNSIGNED> : unsigned 
<INT> : int 
<CHAR> : char 
<SHORT> : short 
<LONG> : long 
<CLASS> : class 
<REAL> : real 
<STATIC> : static 
<IDENTIFIER> : [a-zA-Z][a-zA-Z0-9]* 
<INTEGER> : [0-9]* 
<CHARACTER> : [a-zA-Z0-9]* 
<STRING> : "\""[a-zA-Z0-9]*"\"" 
<EOF> : End of file 
<TYPEDEF> : typedef 
<IF> : if 
<WHILE> : while 
<FOR> : for 
<BREAK> : break 
<RETURN> : return 
<SIZEOF> : sizeof 

==DECLARATION========================================================= 
compilation_unit 
  : import_stmts top_defs <EOF> 

typeref_base  
  : <VOID> 
    | <CHAR> 
    | <SHORT> 
    | <INT> 
    | <LONG> 
    | <UNSIGNED> <CHAR> 
    | <UNSIGNED> <SHORT> 
    | <UNSIGNED> <INT> 
    | <UNSIGNED> <LONG> 
    | <REAL> 
    | <CLASS> <IDENTIFIER> 

import_stmts  
  : (import_stmt)* 

import_stmt 
  : <IMPORT> name ("." name)* ";" 

name 
  : <IDENTIFIER> 

top_defs // top definitions 
  : ( defun 
    | defvars 
    | defconst 
    | defclass 
    | typedef )* 

defvars // variable definition. ex) int a = 0, b=19; 
  : storage type name ["=" expr] [("," name ["=" expr])*] ";" 

storage 
  : [<STATIC>] 

defun // function definition 
  : storage typeref name "(" params ")" block 

params // parameter definition 
  : <VOID> 
  | fixedparams ["," "…"] 

fixedparams // fixed parameter definition 
  : param ("," param)* 

param 
  : type name 

block 
  : "{" defvar_list stmts "}" 

defclass // class definition 
  : <CLASS> name member_list ";" 

member_list //  
  : "{" (class_member ";")* "}" 

class_member // class member definition 
  : type name 
  | defun 

typedef // ex) typedef int i32; 
  : <TYPEDEF> typeref <IDENTIFIER> ";" 

type 
  : typeref 

typeref 
  : typeref_base ( "[""]" | "["<INTEGER>"]")* 
  | typeref_base ("*")*                    // pointer 
  | typeref_base "(" param_typerefs ")"   // function pointer 

param_typerefs // function pointer param type definition 
  : <VOID> 
  | type ("," type)* ["," "…"] 
 

stmts 
  : (stmt)* 

stmt 
  :";" 
  | labeled_stmt 
  | expr ";" 
  | block 
  | if_stmt 
  | while_stmt 
  | dowhile_stmt 
  | for_stmt 
  | switch_stmt 
  | break_stmt 
  | continue_stmt 
  | goto_stmt 
  | return_stmt 

if_stmt  
  : <IF> "(" expr ")" stmt [<ELSE> stmt] 

while_stmt 
  : <WHILE> "(" expr ")" stmt 

for_stmt 
  : <FOR> "(" [expr] ";" [expr] ";" [expr] ")" stmt 

break_stmt 
  : <BREAK> ";" 

return_stmt 
  : <RETURN> ";" 
  | <RETURN> expr ";" 

expr 
  : term "=" rhs_expr 
  | term opassign_op expr 
  | expr10 

opassign_op 
  : "+=" 
  | "-=" 
  | "*=" 
  | "/=" 
  | "%=" 
  | "&=" 
  | "|=" 
  | "^=" 
  | "<<=" 
  | ">>=" 

Operator priority 
+-----------+--------------------+
| Priority  |      Operator      |
+-----------+--------------------+
|    10     |         ? :        |
+-----------+--------------------+
|     9     |         ||         |
+-----------+--------------------+
|     8     |         &&         |
+-----------+--------------------+
|     7     |  >, <, >=, ==, !=  |
+-----------+--------------------+
|     6     |     | (bit op)     |
+-----------+--------------------+
|     5     |     ^ (bit op)     |
+-----------+--------------------+
|     4     |     & (bit op)     |
+-----------+--------------------+
|     3     |      >>, <<        |
+-----------+--------------------+
|     2     |       +, -         |
+-----------+--------------------+
|     1     |     *, /, %        |
+-----------+--------------------+

expr10 
  : expr9 ["?" expr() ":" expr10] 

expr9 
  : expr8 ("||" expr8)* 

expr8 
  : expr7 ("&&" expr7)* 

expr7  
  : expr7 (   ">" expr6  
             | "<" expr6 
             | ">=" expr6 
             | "<=" expr6 
             | "==" expr6 
             | "!=" expr6 
             )* 

expr6 
  : expr5 ("|" expr5)* 

expr5 
  : expr4 ("^" expr4)* 

expr4 
  : expr3 ("&" expr3)* 

expr3 
  : expr2 ( ">>" expr2 | "<<" expr2)* 

expr2 
  : expr1 ( "+" expr1 | "-" expr1)* 

expr1 
  : term ( "*" term  
  | "/" term 
  | "%" term 
  )* 

term 
  : "(" type ")" term          // type casting 
  | unary 

unary 
  : "++" unary                 // pre ++ 
  | "--" unary                 // pre -- 
  | "+" term                   // unary +, positive 
  | "-" term                   // unary -, negative 
  | "!" term                   // Logical negation 
  | "*" term                   // Pointer reference 
  | "&" term                   // adress operator 
  | <SIZEOF> "(" type ")"      // sizeof(type) 
  | <SIZEOF> unary             // sizeof unary 
  | postfix                    // postfix  

postfix 
  : primary ("++"              // post ++ 
            |"--"               // post -- 
            |"[" expr "]"       // array reference 
            |"." name           // class member reference 
            |"->" name          // class member pointer reference 
            |"(" args ")"       // function call 
            )* 

args 
  : [expr ("," expr)*] 

primary 
  : <INTEGER> 
  |<CHARACTER> 
  |<STRING> 
  |<IDENTIFIER> 
  |"(" expr ")" 

